Note: This file comes as part of the RachelSetup[1] directory
which, if I have provided the SD Card, can be found on the card
at /home/pi/RachelSetup/ (and/or possibly at /root/RachelSetup/.)
** RachelSetup used to be called Setup **
It outlines what has been (or needs to be) done to prepare an
SD card (the recent models require a micro-SD card)
to turn a Raspberry Pi into the olpcSF version of a Rachel
server.  Ours is distinct because the videos have been converted
to a format readable by the OLPC XO laptop.
It is hoped that we will soon be able to also run Pathagar.

========================================

A 64 Gigabyte micro-SD card is required.
https://www.amazon.com/SanDisk-microSDXC-Standard-Packaging-SDSQUNC-064G-GN6MA/dp/B010Q588D4/ref=sr_1_1?ie=UTF8&qid=1466631506&sr=8-1&keywords=64+GB+microSD+card

What You Will Need:
    1. A 'host' computer (your laptop or desk top- mine runs Linux,
details might differ if yours is running another OS.)
    2. A Raspberry Pi B: currently being shipped is the v.3
but the older v.2 version is fine and perhaps preferable.
(The v.3 has a built in WiFi but it can not be made to run in AP
mode so is of no help in our use case.)

Decide on a name (mine is 'Rachel') for your project directory
and create it in a location of your choice on your host computer.
Make it your current working directory and then use the following
command to download the Raspbian image:
    wget https://downloads.raspberrypi.org/raspbian_lite_latest
We'll be using the Pi as a 'headless' server so the 'lite' version 
(without a desktop) is recommended.
You should expect to then have the following file in that directory:
    2016-05-27-raspbian-jessie-lite.zip (Or a later version.)
It's advisable to run the sha1sum command to check the integrity of the
download.  (If you don't know what this is, it's not essential.)
Unzip the file; this gives you the '.img' file.
Insert the 64 Gig micro-SD card into a card reader connected to your host
computer and use dmesg to discover its device assignation: probably
/dev/sdb but be sure you get this right or there could be dire
consequences.  Once that is done, using root privileges, copy the image
to the SD card as follows:
    sudo dd if=/path/to/the/image/file.img of=/dev/sdb bs=4M 


FIRST LOG ONTO RASPBERRY PI

Once done, insert the card into a Raspberry Pi, connect it via Ethernet
cable to provide local network AND internet access, and power up by
simply plugging in the micro USB power cable[2].
You will need a way to log on.  A screen (connected by HDMI) and a key
board (connect by USB) will be needed unless you know how to log on
using ssh (my preferred method- I use arp-scan to give me a list of
possible IP addresses and am usually able to guess which one belongs to
the Pi. Comparing the output of arp-scan before plugging in the Pi and
after, gives it away.)


RUN RASPI_CONFIG

Log on as pi with 'raspberry' as the password.

On first boot, raspi-config is run.  If not, issue the command: 
$ raspi-config
The root file system's partition is expanded to use all of the available
SD card capacity.  After this you are given the opportunity to change
many of the configuration settings:
    1. File system expansion (already done.)
    2. Default user is pi, I've been changing the pw to pi::root
    3. Boot into the command line (My preferred default.)
    4. Internationalization:
        Default language: en_us.UTF-8  (change from en_gb.UTF-8)
        Time zone: America, Los_Angeles. (New Pacific)
        Keyboard: generic 105-key seems to work
            English US
            default
            no compose key
            Control-Alt-Backspace to exit Xwindow
    5...7. Left in the default state.
    8. Advanced options:
        A2. Host name: set to rpi1, rpi2, ...
        A4. SSH enabled (I believe this is the default.)
        I believe the other options can be ignored.
Once done go ahead and reboot as suggested.


UPDATING AND UPGRADING

The next steps depend on the presence of scripts that should be 
with this file within the RachelSetup directory.  The RachelSetup
directory is on my 'host machine' so I simply scp or rsync it from
my macine to /root/ and/or /home/pi/ on the Pi.  Move into the
RachelSetup directory and give yourself root privileges as follows:
    $ cd ~/RachelSetup
    $ sudo su 
The prompt changes from '$' to '#'.

Update, upgrade and install more software by sourcing  the
update.sh file.  Be sure the Pi is still connected to the internet,
preferably using an Ethernet cable.
    # source update.sh

A reboot is required to switch over to the new system but before
doing that, ensure that you have WiFi capability. Rasperry Pi
models prior to Model 3 require that you have a WiFi dongle[3]
plugged into one of the USB ports.
Now you can reboot with the following command:

# shutdown -r now


CREATING A SERVER 

Some configuration changes are needed to make the Pi into
a server so that it can host a web page and so that it can be
run "headless." Some customization of the hostapd file will
most likely be necessary create_server.sh before running the
next script.: see foot note[4].
After that's done, be sure of WiFi capability (discussed above) and
Internet connectivity via an Ethernet cable.
Give yourself root privileges and then source the script:
$ sudo su
# source create_server.sh


MOVING CONTENT

There are only two things remaining and they have to do with the
(apache2) server.  We must move the Rachel content to the
/var/www/ dirctory tree and we must modify apache's root file system
configuration.  The content (converted from mp4 to webm format) I can
provide if you send me a >=32Gig memory stick which you can then plug
into the pi and transfer the data using the
following command with root privileges:

# rsync -av /path/to/memorystick/mount/point/Rachel_www/* /var/www/


CONFIGURING APACHE

Most of this can be done by sourcing the included apache_site.sh
script:

# source apache_site.sh

The last thing is to edit (I use vim) the
/etc/apache2/sites-available/000-default.conf file:

# vim /etc/apache2/sites-available/000-default.conf

Modify the DocumentRoot line by deleting the trailing html so it reads:
DocumentRoot /var/www/

Finally we are done.

Use an XO laptop (or any other wifi enabled computer) to connect to
the Pi's SSID and then point any browser (on the XO it's the browse
activity) to http://10.10.10.10 to see if it all works.
You should also be able to do the same thing using any of the
following as entries for the URL:
library
library.lan
rachel
rachel.lan

Good luck!


Foot Notes:

 [0] The older Raspberry PiB models will also work and/but may or
 may not perform as well.  One source is here:
http://www.amazon.com/CanaKit-Raspberry-Complete-Original-Preloaded/dp/B008XVAVAW/ref=sr_1_1?ie=UTF8&qid=1431972409&sr=8-1&keywords=canakit+raspberry+pi+2

[1] ** RachelSetup used to be called Setup **

[2] Power sources vary from 800mA (inadequate!) to over 2A. More is
better; try to get close to 2A at least.

[3] WiFi is built into the Raspberry Pi 3; a dongle is not needed.

[4] Before running the create_server.sh script, have a look at the
the hostapd.conf file and change the SSID if need be.  If you expect to
have more than one server in the same vicinity, it is essential that
they do not share the same SSID and it would be preferable if they did
not both use the same channel.  (Their host names should also differ;
this is done during execution of rasp-config but can be modified by
editing /etc/hostname after the fact.)

